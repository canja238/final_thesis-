classdef PathFollowingRobot < handle
    properties
        % Hardware Interface
        SerialPort
        
        % Path Planning
        Waypoints
        CurrentWaypointIndex
        PositionThreshold = 2      % meters
        HeadingThreshold = 15     % degrees
        LinearSpeed = 0.2         % m/s
        
        % Control System
        FuzzySystem
        InitialAlignmentDone = false
        
        % Visualization
        MapFigure
        PathPlot
        RobotPlot
        WaypointPlot
        PerformanceFigure
        
        % Data Logging
        LogFile
        LogData
        LogStartTime
        PositionHistory
        LastValidPosition = [0, 0]
        LastPositionTime
        
        % State Management
        Running = false
    end
    
    methods
        %% Constructor and Initialization
        function obj = PathFollowingRobot(portName)
            % Initialize serial communication
            obj.SerialPort = serialport(portName, 115200);
            configureTerminator(obj.SerialPort, "LF");
            flush(obj.SerialPort);
            
            % Define waypoints (example GPS coordinates)
            obj.Waypoints = [
                7.214908, 124.249291;  % Start
                7.214916, 124.249351;  
                7.214923, 124.249411;  
                7.214931, 124.249471;  % End
            ];
            
            obj.CurrentWaypointIndex = 1;
            
            % Initialize subsystems
            obj.initializeFuzzySystem();
            obj.initializeLogging();
            obj.initializeMap();
            
            disp('Robot initialized. Call start() to begin operation.');
        end
        
        function initializeFuzzySystem(obj)
            fis = mamfis('Name', 'path_following');
            
            % Input 1: Cross-track error (meters)
            fis = addInput(fis, [-5 5], 'Name', 'cross_track_error');
            fis = addMF(fis, 'cross_track_error', 'trapmf', [-5 -5 -2 -1], 'Name', 'Left');
            fis = addMF(fis, 'cross_track_error', 'trimf', [-1 0 1], 'Name', 'Center');
            fis = addMF(fis, 'cross_track_error', 'trapmf', [1 2 5 5], 'Name', 'Right');
            
            % Input 2: Heading error (degrees)
            fis = addInput(fis, [-90 90], 'Name', 'heading_error');
            fis = addMF(fis, 'heading_error', 'trapmf', [-90 -90 -30 -15], 'Name', 'Left');
            fis = addMF(fis, 'heading_error', 'trimf', [-15 0 15], 'Name', 'Straight');
            fis = addMF(fis, 'heading_error', 'trapmf', [15 30 90 90], 'Name', 'Right');
            
            % Outputs: PWM signals (-100 to 100)
            fis = addOutput(fis, [-100 100], 'Name', 'pwm_left');
            fis = addMF(fis, 'pwm_left', 'trimf', [-100 -100 -50], 'Name', 'Reverse');
            fis = addMF(fis, 'pwm_left', 'trimf', [-60 0 60], 'Name', 'Slow');
            fis = addMF(fis, 'pwm_left', 'trimf', [50 100 100], 'Name', 'Forward');
            
            fis = addOutput(fis, [-100 100], 'Name', 'pwm_right');
            fis = addMF(fis, 'pwm_right', 'trimf', [-100 -100 -50], 'Name', 'Reverse');
            fis = addMF(fis, 'pwm_right', 'trimf', [-60 0 60], 'Name', 'Slow');
            fis = addMF(fis, 'pwm_right', 'trimf', [50 100 100], 'Name', 'Forward');
            
            % Rule Base
            rules = [
                1 1 3 1 1 1;   % Far left, heading left -> strong right turn
                1 2 3 2 1 1;   % Far left, straight -> medium right turn
                1 3 3 3 1 1;   % Far left, heading right -> gentle right turn
                
                2 1 2 1 1 1;   % Slightly left, heading left -> gentle right turn
                2 2 3 3 1 1;   % On path, straight -> go straight
                2 3 1 2 1 1;   % Slightly left, heading right -> gentle left turn
                
                3 1 1 1 1 1;   % Far right, heading left -> gentle left turn
                3 2 2 3 1 1;   % Far right, straight -> medium left turn
                3 3 1 3 1 1;   % Far right, heading right -> strong left turn
            ];
            
            fis = addRule(fis, rules);
            obj.FuzzySystem = fis;
        end
        
        function initializeLogging(obj)
            timestamp = datestr(now, 'yyyy-mm-dd_HH-MM-SS');
            obj.LogFile = sprintf('robot_log_%s.csv', timestamp);
            
            % Create empty table with predefined columns
            obj.LogData = table(...
                'Size', [0, 13], ...
                'VariableTypes', {...
                    'datetime', 'double', 'double', 'double', 'double', ...
                    'double', 'double', 'double', 'double', 'double', ...
                    'double', 'double', 'double'}, ...
                'VariableNames', {...
                    'Timestamp', 'Latitude', 'Longitude', 'Speed', 'Heading', ...
                    'TargetLat', 'TargetLon', 'CrossTrackError', 'HeadingError', ...
                    'DistanceToTarget', 'LeftPWM', 'RightPWM', 'PathBearing'});
            
            % Write CSV header
            fid = fopen(obj.LogFile, 'w');
            fprintf(fid, 'Timestamp,Latitude,Longitude,Speed,Heading,');
            fprintf(fid, 'TargetLat,TargetLon,CrossTrackError,HeadingError,');
            fprintf(fid, 'DistanceToTarget,LeftPWM,RightPWM,PathBearing\n');
            fclose(fid);
            
            obj.LogStartTime = datetime('now');
        end
        
        function initializeMap(obj)
            obj.MapFigure = figure('Name', 'Robot Path', 'NumberTitle', 'off');
            
            % Plot planned path
            [lat, lon] = obj.convertToNumeric(obj.Waypoints);
            geoplot(lat, lon, 'g-', 'LineWidth', 2, 'DisplayName', 'Planned Path');
            hold on;
            
            % Plot waypoints
            geoscatter(lat, lon, 'filled', 'MarkerFaceColor', 'red', 'DisplayName', 'Waypoints');
            
            % Initialize robot path and position markers
            obj.PathPlot = geoplot(lat(1), lon(1), 'b-', 'LineWidth', 1.5, 'DisplayName', 'Actual Path');
            obj.RobotPlot = geoscatter(lat(1), lon(1), 100, 'filled', 'MarkerFaceColor', 'blue', 'DisplayName', 'Robot');
            
            geobasemap('satellite');
            title('Robot Path Monitoring');
            legend('Location', 'best');
            drawnow;
        end
        
        %% Core Operation Methods
        function start(obj)
            obj.Running = true;
            fprintf('Starting robot operation\n');
            obj.run();
        end
        
        function stop(obj)
            obj.Running = false;
            writeline(obj.SerialPort, "CMD:0,0");
            fprintf('Robot stopped\n');
            
            % Save performance data
            obj.plotPerformance();
            saveas(obj.MapFigure, strrep(obj.LogFile, '.csv', '_map.png'));
        end
        
        function run(obj)
            while obj.Running
                if obj.SerialPort.NumBytesAvailable > 0
                    data = readline(obj.SerialPort);
                    
                    if startsWith(data, "GPS:")
                        try
                            % Parse GPS data
                            gpsData = sscanf(data, "GPS:%f,%f,%f,%f");
                            if length(gpsData) == 4
                                [currentLat, currentLon, speed, heading] = deal(...
                                    gpsData(1), gpsData(2), gpsData(3), gpsData(4));
                                timestamp = datetime('now');
                                
                                % Validate position
                                if currentLat == 0 && currentLon == 0
                                    fprintf('Invalid GPS position (0,0)\n');
                                    continue;
                                end
                                
                                % Update visualization
                                obj.LastValidPosition = [currentLat, currentLon];
                                obj.updateMap(currentLat, currentLon);
                                
                                %% Initial Alignment Phase
                                if ~obj.InitialAlignmentDone
                                    targetLat = obj.Waypoints(1, 1);
                                    targetLon = obj.Waypoints(1, 2);
                                    distance = obj.calculateDistance(...
                                        currentLat, currentLon, targetLat, targetLon);
                                    
                                    if distance > obj.PositionThreshold
                                        % Calculate required heading
                                        bearingToTarget = obj.calculateBearing(...
                                            currentLat, currentLon, targetLat, targetLon);
                                        headingError = obj.wrapTo180(bearingToTarget - heading);
                                        
                                        % Generate motor commands (cross-track error = 0)
                                        inputs = [0, headingError];
                                        outputs = evalfis(obj.FuzzySystem, inputs);
                                        
                                        % Scale by distance factor
                                        distanceFactor = min(1, distance / obj.PositionThreshold);
                                        leftPWM = round(outputs(1) * distanceFactor);
                                        rightPWM = round(outputs(2) * distanceFactor);
                                        
                                        % Clamp PWM values
                                        leftPWM = max(-255, min(255, leftPWM));
                                        rightPWM = max(-255, min(255, rightPWM));
                                        
                                        % Log and send commands
                                        obj.logData(timestamp, currentLat, currentLon, speed, heading,...
                                                   targetLat, targetLon, 0, headingError,...
                                                   distance, leftPWM, rightPWM, bearingToTarget);
                                        
                                        writeline(obj.SerialPort, sprintf("CMD:%d,%d", leftPWM, rightPWM));
                                        fprintf('Aligning to Waypoint 1 | Dist: %.2fm | Heading Err: %.1f°\n',...
                                            distance, headingError);
                                        continue;
                                    else
                                        % Reached first waypoint!
                                        obj.InitialAlignmentDone = true;
                                        obj.CurrentWaypointIndex = 2;
                                        fprintf('Reached Waypoint 1! Now following path to Waypoint %d.\n',...
                                            obj.CurrentWaypointIndex);
                                    end
                                end
                                
                                %% Normal Path Following
                                target = obj.Waypoints(obj.CurrentWaypointIndex, :);
                                [crossTrackError, headingError, pathBearing] = ...
                                    obj.calculateErrors(currentLat, currentLon, heading);
                                distance = obj.calculateDistance(...
                                    currentLat, currentLon, target(1), target(2));
                                
                                % Apply fuzzy logic
                                boundedCrossTrack = max(-5, min(5, crossTrackError));
                                inputs = [boundedCrossTrack, headingError];
                                outputs = evalfis(obj.FuzzySystem, inputs);
                                
                                % Scale outputs by distance
                                distanceFactor = min(1, distance / obj.PositionThreshold);
                                leftPWM = round(outputs(1) * distanceFactor);
                                rightPWM = round(outputs(2) * distanceFactor);
                                
                                % Clamp PWM values
                                leftPWM = max(-255, min(255, leftPWM));
                                rightPWM = max(-255, min(255, rightPWM));
                                
                                % Log data
                                obj.logData(timestamp, currentLat, currentLon, speed, heading,...
                                           target(1), target(2), crossTrackError, headingError,...
                                           distance, leftPWM, rightPWM, pathBearing);
                                
                                % Check waypoint arrival
                                if distance < obj.PositionThreshold
                                    if obj.CurrentWaypointIndex < size(obj.Waypoints, 1)
                                        obj.CurrentWaypointIndex = obj.CurrentWaypointIndex + 1;
                                        fprintf('Reached Waypoint %d! Now heading to Waypoint %d.\n',...
                                            obj.CurrentWaypointIndex-1, obj.CurrentWaypointIndex);
                                    else
                                        obj.stop();
                                        fprintf('Final waypoint reached!\n');
                                        return;
                                    end
                                end
                                
                                % Send motor commands
                                writeline(obj.SerialPort, sprintf("CMD:%d,%d", leftPWM, rightPWM));
                                
                                % Display status
                                fprintf('Position: (%.6f, %.6f) | Target: (%.6f, %.6f)\n',...
                                    currentLat, currentLon, target(1), target(2));
                                fprintf('Cross-track: %.2fm | Heading Err: %.1f° | Dist: %.2fm\n',...
                                    crossTrackError, headingError, distance);
                                fprintf('Motor Outputs: L=%d, R=%d\n\n', leftPWM, rightPWM);
                            end
                        catch ME
                            fprintf('Error processing GPS data: %s\n', ME.message);
                        end
                    end
                end
                pause(0.1);  % Prevent CPU overload
            end
        end
        
        %% Navigation Utilities
        function [crossTrackError, headingError, pathBearing] = calculateErrors(obj, currentLat, currentLon, currentHeading)
            if obj.InitialAlignmentDone
                currentTarget = obj.Waypoints(obj.CurrentWaypointIndex, :);
                
                % Calculate path bearing (current segment direction)
                if obj.CurrentWaypointIndex < size(obj.Waypoints, 1)
                    nextTarget = obj.Waypoints(obj.CurrentWaypointIndex + 1, :);
                    pathBearing = obj.calculateBearing(...
                        currentTarget(1), currentTarget(2), nextTarget(1), nextTarget(2));
                else
                    pathBearing = currentHeading;  % Final waypoint - maintain heading
                end
            else
                % During initial alignment, target is first waypoint
                currentTarget = obj.Waypoints(1, :);
                pathBearing = obj.calculateBearing(...
                    currentLat, currentLon, currentTarget(1), currentTarget(2));
            end
            
            % Calculate bearing to target and distance
            bearingToTarget = obj.calculateBearing(...
                currentLat, currentLon, currentTarget(1), currentTarget(2));
            distanceToTarget = obj.calculateDistance(...
                currentLat, currentLon, currentTarget(1), currentTarget(2));
            
            if obj.InitialAlignmentDone
                % Normal path-following: calculate cross-track error
                angleDiff = obj.wrapTo180(bearingToTarget - pathBearing);
                crossTrackError = distanceToTarget * sind(angleDiff);
            else
                % Initial alignment: cross-track error = 0 (just face target)
                crossTrackError = 0;
            end
            
            % Heading error is always relative to desired bearing
            headingError = obj.wrapTo180(pathBearing - currentHeading);
        end
        
        function distance = calculateDistance(~, lat1, lon1, lat2, lon2)
            % Haversine formula (meters)
            R = 6371000;  % Earth radius
            dLat = deg2rad(lat2-lat1);
            dLon = deg2rad(lon2-lon1);
            a = sin(dLat/2)^2 + cos(deg2rad(lat1)) * cos(deg2rad(lat2)) * sin(dLon/2)^2;
            distance = R * 2 * atan2(sqrt(a), sqrt(1-a));
        end
        
        function bearing = calculateBearing(~, lat1, lon1, lat2, lon2)
            % Bearing between two GPS points (degrees)
            lat1 = deg2rad(lat1);
            lon1 = deg2rad(lon1);
            lat2 = deg2rad(lat2);
            lon2 = deg2rad(lon2);
            
            y = sin(lon2-lon1) * cos(lat2);
            x = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2-lon1);
            bearing = rad2deg(atan2(y, x));
        end
        
        function angle = wrapTo180(~, angle)
            % Convert angle to [-180,180] range
            angle = mod(angle + 180, 360) - 180;
        end
        
        %% Visualization and Data Handling
        function updateMap(obj, currentLat, currentLon)
            % Update path history
            obj.PathPlot.LatitudeData = [obj.PathPlot.LatitudeData, currentLat];
            obj.PathPlot.LongitudeData = [obj.PathPlot.LongitudeData, currentLon];
            obj.PositionHistory = [obj.PositionHistory; currentLat, currentLon];
            
            % Update robot position marker
            obj.RobotPlot.LatitudeData = currentLat;
            obj.RobotPlot.LongitudeData = currentLon;
            
            % Update target waypoint marker
            if isempty(obj.WaypointPlot) || ~isvalid(obj.WaypointPlot)
                obj.WaypointPlot = geoscatter(...
                    obj.Waypoints(1,1), obj.Waypoints(1,2),...
                    100, 'filled', 'MarkerFaceColor', 'yellow',...
                    'DisplayName', 'Current Target');
            else
                if obj.InitialAlignmentDone
                    targetIdx = obj.CurrentWaypointIndex;
                else
                    targetIdx = 1;
                end
                obj.WaypointPlot.LatitudeData = obj.Waypoints(targetIdx, 1);
                obj.WaypointPlot.LongitudeData = obj.Waypoints(targetIdx, 2);
            end
            
            % Adjust map limits
            allLats = [currentLat; obj.Waypoints(:,1)];
            allLons = [currentLon; obj.Waypoints(:,2)];
            latLim = [min(allLats)-0.0001, max(allLats)+0.0001];
            lonLim = [min(allLons)-0.0001, max(allLons)+0.0001];
            geolimits(latLim, lonLim);
            
            drawnow;
        end
        
        function logData(obj, timestamp, lat, lon, speed, heading,...
                        targetLat, targetLon, crossTrackError, headingError,...
                        distance, leftPWM, rightPWM, pathBearing)
            % Add data to log table
            newRow = {timestamp, lat, lon, speed, heading,...
                     targetLat, targetLon, crossTrackError, headingError,...
                     distance, leftPWM, rightPWM, pathBearing};
            obj.LogData = [obj.LogData; newRow];
            
            % Append to CSV file
            fid = fopen(obj.LogFile, 'a');
            fprintf(fid, '%s,%.8f,%.8f,%.2f,%.2f,%.8f,%.8f,%.2f,%.2f,%.2f,%d,%d,%.2f\n',...
                datestr(timestamp, 'yyyy-mm-dd HH:MM:SS.FFF'),...
                lat, lon, speed, heading,...
                targetLat, targetLon, crossTrackError, headingError,...
                distance, leftPWM, rightPWM, pathBearing);
            fclose(fid);
        end
        
        function plotPerformance(obj)
            if height(obj.LogData) < 2
                fprintf('Not enough data for performance analysis\n');
                return;
            end
            
            obj.PerformanceFigure = figure('Name', 'Performance Analysis', 'NumberTitle', 'off');
            
            elapsedTime = seconds(obj.LogData.Timestamp - obj.LogData.Timestamp(1));
            
            % Navigation Errors
            subplot(3,1,1);
            yyaxis left;
            plot(elapsedTime, obj.LogData.CrossTrackError, 'r-', 'DisplayName', 'Cross-track Error');
            ylabel('Cross-track Error (m)');
            
            yyaxis right;
            plot(elapsedTime, obj.LogData.HeadingError, 'b-', 'DisplayName', 'Heading Error');
            ylabel('Heading Error (°)');
            title('Navigation Errors');
            legend;
            grid on;
            
            % Motor Commands
            subplot(3,1,2);
            plot(elapsedTime, obj.LogData.LeftPWM, 'b-', 'DisplayName', 'Left PWM');
            hold on;
            plot(elapsedTime, obj.LogData.RightPWM, 'r-', 'DisplayName', 'Right PWM');
            ylabel('PWM Value');
            title('Motor Commands');
            legend;
            grid on;
            
            % Distance to Target
            subplot(3,1,3);
            plot(elapsedTime, obj.LogData.DistanceToTarget, 'k-');
            ylabel('Distance (m)');
            xlabel('Elapsed Time (s)');
            title('Distance to Target');
            grid on;
            
            % Save figure
            saveas(obj.PerformanceFigure, strrep(obj.LogFile, '.csv', '_performance.png'));
        end
        
        %% Cleanup
        function delete(obj)
            if obj.Running
                obj.stop();
            end
            delete(obj.SerialPort);
        end
    end
end
